import threading
import time
import random
import tkinter as tk
from tkinter import ttk

# Mock function to simulate fetching weather data
def fetch_weather(city):
    time.sleep(random.uniform(0.5, 1.5))  # Simulate network delay
    temperature = random.randint(-10, 40)
    weather = random.choice(['Sunny', 'Cloudy', 'Rainy', 'Snowy'])
    return f"{city}: {temperature}Â°C, {weather}"

# Function to update weather data for a city
def update_city_weather(city, label):
    while True:
        weather_data = fetch_weather(city)
        label.config(text=weather_data)
        time.sleep(5)  # Update every 10 seconds

# Function to update weather data periodically
def update_weather_periodically(city_labels):
    while True:
        for city, label in city_labels.items():
            weather_data = fetch_weather(city)
            label.config(text=weather_data)
        time.sleep(60)  # Update every 60 seconds

# List of cities
cities = ['New York', 'London', 'Paris', 'Tokyo', 'Sydney']

# Create the main application window
root = tk.Tk()
root.title("Weather Application")
root.configure(background='#2E4053')

# Configure styles
style = ttk.Style()
style.configure('TFrame', background='#2E4053')
style.configure('City.TFrame', background='#34495E', relief='raised', borderwidth=2)
style.configure('TLabel', background='#2E4053', foreground='#FDFEFE', font=('Helvetica', 14))
style.configure('City.TLabel', background='#34495E', foreground='#FDFEFE', font=('Helvetica', 16, 'bold'))

# Dictionary to store city labels
city_labels = {}

# Create frames and labels for each city and start threads to update them
for i, city in enumerate(cities):
    city_frame = ttk.Frame(root, style='City.TFrame', padding="10", width=300, height=110)
    city_frame.grid(row=i, column=0, pady=10, padx=50, sticky=(tk.W, tk.E))
    city_frame.grid_propagate(False)  # Prevent the frame from resizing to fit its contents
    city_frame.columnconfigure(0, weight=1)
    
    label = ttk.Label(city_frame, text=f"{city}: Fetching...", style='City.TLabel')
    label.grid(row=0, column=0, sticky=(tk.W, tk.E))
    city_labels[city] = label
    threading.Thread(target=update_city_weather, args=(city, label), daemon=True).start()

# Start a thread to periodically update all cities' weather data
threading.Thread(target=update_weather_periodically, args=(city_labels,), daemon=True).start()

# Run the main application loop
root.mainloop()
